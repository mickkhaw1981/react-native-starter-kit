---
description: 
globs: 
alwaysApply: true
---
## IMPORTANT:
- After all changes are made, ALWAYS build the project with `npx expo build:ios `. Ignore warnings, fix errors.
- Always add a one-sentence summary of changes to `.cursor-updates` file in markdown format at the end of every agent interaction.
- If you forget, the user can type the command "finish" and you will run the build and update `.cursor-updates`.
- Finally, don't update git with `git add . && git commit -m "..."` without asking the user's permission

## Coding Best Practices
- **Do not modify code or UI elements that already work, unless explicitly instructed. Avoid duplicating existing functionality; reuse working components whenever possible.
- Write comprehensive tests for all new or modified functionality.
- Always ask clarifying questions if tasks or requirements are unclear.
- Keep code short; commits semantic.
- Reusable logic in `lib/utils/shared.ts` or `lib/utils/server.ts`.

## Typescript Conventions:
- Strict mode. Avoid `any`.
- Use optional chaining, union types (no enums).


## Coding Conventions:
- Use Expo Router
- Assume we always design for mobile and web. Follow responsive design principles
- Implement efficient data fetching
- Implement error handling
- Use loading states
- Follow routing conventions
- Use absolute imports (@/ for src, ~/ for outside)
- Write clean, concise components
- Do not include comments unless it is for complex logic

## Naming Conventions:
- Use lowercase with dashes for directories (e.g., components/auth-wizard)
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files, variables and function names (e.g., getUserData, isAuthenticated)
- Favor named exports for components and utilities



